{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ca718416-084c-41ce-8061-c804ea21c543",
   "metadata": {},
   "outputs": [],
   "source": [
    "# importing libraries\n",
    "import pandas as pd\n",
    "import mysql.connector\n",
    "import streamlit as slt\n",
    "from streamlit_option_menu import option_menu\n",
    "import plotly.express as px\n",
    "import time\n",
    "\n",
    "# kerala bus\n",
    "lists_k=[]\n",
    "df_k=pd.read_csv(\"kerala_bus_details.csv\")\n",
    "for i,r in df_k.iterrows():\n",
    "    lists_k.append(r[\"Route_Name\"])\n",
    "\n",
    "#Andhra bus\n",
    "lists_A=[]\n",
    "df_A=pd.read_csv(\"ap_bus_details.csv\")\n",
    "for i,r in df_A.iterrows():\n",
    "    lists_A.append(r[\"Route_Name\"])\n",
    "\n",
    "#Telungana bus\n",
    "lists_T=[]\n",
    "df_T=pd.read_csv(\"telegana_bus_details.csv\")\n",
    "for i,r in df_T.iterrows():\n",
    "    lists_T.append(r[\"Route_Name\"])\n",
    "\n",
    "#kadamba bus\n",
    "lists_G=[]\n",
    "df_G=pd.read_csv(\"kadamba_bus_details.csv\")\n",
    "for i,r in df_G.iterrows():\n",
    "    lists_G.append(r[\"Route_Name\"])\n",
    "\n",
    "#Rajastan bus\n",
    "lists_R=[]\n",
    "df_R=pd.read_csv(\"rajasthan_bus_details.csv\")\n",
    "for i,r in df_R.iterrows():\n",
    "    lists_R.append(r[\"Route_Name\"])\n",
    "\n",
    "\n",
    "# chandigarh\n",
    "lists_C=[]\n",
    "df_C=pd.read_csv(\"chandigarh_bus_details.csv\")\n",
    "for i,r in df_C.iterrows():\n",
    "    lists_C.append(r[\"Route_Name\"])\n",
    "\n",
    "# Himachal bus\n",
    "lists_H=[]\n",
    "df_H=pd.read_csv(\"himachal_bus_details.csv\")\n",
    "for i,r in df_H.iterrows():\n",
    "    lists_H.append(r[\"Route_Name\"])\n",
    "\n",
    "#Assam bus\n",
    "lists_AS=[]\n",
    "df_AS=pd.read_csv(\"assam_bus_details.csv\")\n",
    "for i,r in df_AS.iterrows():\n",
    "    lists_AS.append(r[\"Route_Name\"])\n",
    "\n",
    "#jammu bus\n",
    "lists_J=[]\n",
    "df_J=pd.read_csv(\"jk_bus_details.csv\")\n",
    "for i,r in df_J.iterrows():\n",
    "    lists_J.append(r[\"Route_Name\"])\n",
    "\n",
    "#West bengal bus\n",
    "lists_WB=[]\n",
    "df_WB=pd.read_csv(\"wb_bus_details.csv\")\n",
    "for i,r in df_WB.iterrows():\n",
    "    lists_WB.append(r[\"Route_Name\"])\n",
    "\n",
    "#setting up streamlit page\n",
    "slt.set_page_config(layout=\"wide\")\n",
    "\n",
    "web=option_menu(menu_title=\"🚌OnlineBus\",\n",
    "                options=[\"Home\",\"📍States and Routes\"],\n",
    "                icons=[\"house\",\"info-circle\"],\n",
    "                orientation=\"horizontal\"\n",
    "                )\n",
    "# Home page setting\n",
    "if web==\"Home\":\n",
    "    slt.title(\"Redbus Data Scraping with Selenium & Dynamic Filtering using Streamlit\")\n",
    "    slt.subheader(\":blue[Domain:]  Transportation\")\n",
    "    slt.subheader(\":blue[Ojective:] \")\n",
    "    slt.markdown(\"The 'Redbus Data Scraping and Filtering with Streamlit Application' aims to revolutionize the transportation industry by providing a comprehensive solution for collecting, analyzing, and visualizing bus travel data. By utilizing Selenium for web scraping, this project automates the extraction of detailed information from Redbus, including bus routes, schedules, prices, and seat availability. By streamlining data collection and providing powerful tools for data-driven decision-making, this project can significantly improve operational efficiency and strategic planning in the transportation industry.\")\n",
    "    slt.subheader(\":blue[Overview:]\") \n",
    "    slt.markdown(\"Selenium: Selenium is a tool used for automating web browsers. It is commonly used for web scraping, which involves extracting data from websites. Selenium allows you to simulate human interactions with a web page, such as clicking buttons, filling out forms, and navigating through pages, to collect the desired data...\")\n",
    "    slt.markdown('''Pandas: Use the powerful Pandas library to transform the dataset from CSV format into a structured dataframe.\n",
    "                    Pandas helps data manipulation, cleaning, and preprocessing, ensuring that data was ready for analysis.''')\n",
    "    slt.markdown('''MySQL: With help of SQL to establish a connection to a SQL database, enabling seamless integration of the transformed dataset\n",
    "                    and the data was efficiently inserted into relevant tables for storage and retrieval.''')\n",
    "    slt.markdown(\"Streamlit: Developed an interactive web application using Streamlit, a user-friendly framework for data visualization and analysis.\")\n",
    "    slt.subheader(\":blue[Skill-take:]\")\n",
    "    slt.markdown(\"Selenium, Python, Pandas, MySQL,mysql-connector-python, Streamlit.\")\n",
    "    slt.subheader(\":blue[Developed-by:] nagabharathi\")\n",
    "\n",
    "# States and Routes page setting\n",
    "if web == \"📍States and Routes\":\n",
    "    S = slt.selectbox(\"Lists of States\", [\"Kerala\", \"Andhra Pradesh\", \"Telegana\", \"kadamba\", \"Rajastan\", \n",
    "                                          \"Chandigarh\", \"Himachal\", \"Assam\", \"Jammu\", \"West Bengal\"])\n",
    "    \n",
    "    col1,col2=slt.columns(2)\n",
    "    with col1:\n",
    "        select_type = slt.radio(\"Choose bus type\", (\"sleeper\", \"semi-sleeper\", \"others\"))\n",
    "    with col2:\n",
    "        select_fare = slt.radio(\"Choose bus fare range\", (\"50-1000\", \"1000-2000\", \"2000 and above\"))\n",
    "    TIME=slt.time_input(\"select the time\")\n",
    "\n",
    "    # Kerala bus fare filtering\n",
    "    if S == \"Kerala\":\n",
    "        K = slt.selectbox(\"List of routes\",lists_k)\n",
    "\n",
    "        def type_and_fare(bus_type, fare_range):\n",
    "            conn = mysql.connector.connect(host=\"localhost\", user=\"root\", password=\"naga\", database=\"RED_BUS_DETAILS\")\n",
    "            my_cursor = conn.cursor()\n",
    "            # Define fare range based on selection\n",
    "            if fare_range == \"50-1000\":\n",
    "                fare_min, fare_max = 50, 1000\n",
    "            elif fare_range == \"1000-2000\":\n",
    "                fare_min, fare_max = 1000, 2000\n",
    "            else:\n",
    "                fare_min, fare_max = 2000, 100000  # assuming a high max value for \"2000 and above\"\n",
    "\n",
    "            # Define bus type condition\n",
    "            if bus_type == \"sleeper\":\n",
    "                bus_type_condition = \"Bus_Type LIKE '%Sleeper%'\"\n",
    "            elif bus_type == \"semi-sleeper\":\n",
    "                bus_type_condition = \"Bus_Type LIKE '%A/c Semi Sleeper %'\"\n",
    "            else:\n",
    "                bus_type_condition = \"Bus_Type NOT LIKE '%Sleeper%' AND Bus_Type NOT LIKE '%Semi-Sleeper%'\"\n",
    "\n",
    "            query = f'''\n",
    "                SELECT * FROM busdetails \n",
    "                WHERE Price BETWEEN {fare_min} AND {fare_max}\n",
    "                AND Route_Name = \"{K}\"\n",
    "                AND {bus_type_condition} AND Departing_Time>='{TIME}'\n",
    "                ORDER BY Price and Departing_Time DESC\n",
    "            '''\n",
    "            my_cursor.execute(query)\n",
    "            out = my_cursor.fetchall()\n",
    "            conn.close()\n",
    "\n",
    "            df = pd.DataFrame(out, columns=[\n",
    "                \"ID\", \"Route_Name\",\"Route_Link\",\"Bus_Name\", \"Bus_Type\", \"Departing_Time\", \"Duration\", \"Reaching_Time\",\n",
    "                \"Star_Rating\",\"Price\",\"Seat_Availability\"\n",
    "            ])\n",
    "            return df\n",
    "\n",
    "        df_result = type_and_fare(select_type, select_fare)\n",
    "        slt.dataframe(df_result)\n",
    "\n",
    "    # Andhra Pradesh bus fare filtering\n",
    "    if S==\"Andhra Pradesh\":\n",
    "        A=slt.selectbox(\"list of routes\",lists_A)\n",
    "\n",
    "        def type_and_fare_A(bus_type, fare_range):\n",
    "            conn = mysql.connector.connect(host=\"localhost\", user=\"root\", password=\"naga\", database=\"RED_BUS_DETAILS\")\n",
    "            my_cursor = conn.cursor()\n",
    "            # Define fare range based on selection\n",
    "            if fare_range == \"50-1000\":\n",
    "                fare_min, fare_max = 50, 1000\n",
    "            elif fare_range == \"1000-2000\":\n",
    "                fare_min, fare_max = 1000, 2000\n",
    "            else:\n",
    "                fare_min, fare_max = 2000, 100000  \n",
    "\n",
    "            # Define bus type condition\n",
    "            if bus_type == \"sleeper\":\n",
    "                bus_type_condition = \"Bus_Type LIKE '%Sleeper%'\"\n",
    "            elif bus_type == \"semi-sleeper\":\n",
    "                bus_type_condition = \"Bus_Type LIKE '%A/c Semi Sleeper %'\"\n",
    "            else:\n",
    "                bus_type_condition = \"Bus_Type NOT LIKE '%Sleeper%' AND Bus_Type NOT LIKE '%Semi-Sleeper%'\"\n",
    "\n",
    "            query = f'''\n",
    "                SELECT * FROM busdetails \n",
    "                WHERE Price BETWEEN {fare_min} AND {fare_max}\n",
    "                AND Route_Name = \"{A}\"\n",
    "                AND {bus_type_condition} AND Departing_Time>='{TIME}'\n",
    "                ORDER BY Price and Departing_Time DESC\n",
    "            '''\n",
    "            my_cursor.execute(query)\n",
    "            out = my_cursor.fetchall()\n",
    "            conn.close()\n",
    "\n",
    "            df = pd.DataFrame(out, columns=[\n",
    "                \"ID\", \"Route_Name\",\"Route_Link\",\"Bus_Name\", \"Bus_Type\", \"Departing_Time\", \"Duration\", \"Reaching_Time\",\n",
    "                \"Star_Rating\",\"Price\",\"Seat_Availability\"\n",
    "            ])\n",
    "            return df\n",
    "\n",
    "        df_result = type_and_fare_A(select_type, select_fare)\n",
    "        slt.dataframe(df_result)\n",
    "          \n",
    "\n",
    "    # Telugana bus fare filtering\n",
    "    if S==\"Telugana\":\n",
    "        T=slt.selectbox(\"list of routes\",lists_T)\n",
    "\n",
    "        def type_and_fare_T(bus_type, fare_range):\n",
    "            conn = mysql.connector.connect(host=\"localhost\", user=\"root\", password=\"naga\", database=\"RED_BUS_DETAILS\")\n",
    "            my_cursor = conn.cursor()\n",
    "            # Define fare range based on selection\n",
    "            if fare_range == \"50-1000\":\n",
    "                fare_min, fare_max = 50, 1000\n",
    "            elif fare_range == \"1000-2000\":\n",
    "                fare_min, fare_max = 1000, 2000\n",
    "            else:\n",
    "                fare_min, fare_max = 2000, 100000  \n",
    "\n",
    "            # Define bus type condition\n",
    "            if bus_type == \"sleeper\":\n",
    "                bus_type_condition = \"Bus_Type LIKE '%Sleeper%'\"\n",
    "            elif bus_type == \"semi-sleeper\":\n",
    "                bus_type_condition = \"Bus_type LIKE '%A/c Semi Sleeper %'\"\n",
    "            else:\n",
    "                bus_type_condition = \"Bus_Type NOT LIKE '%Sleeper%' AND Bus_type NOT LIKE '%Semi-Sleeper%'\"\n",
    "\n",
    "            query = f'''\n",
    "                SELECT * FROM busdetails \n",
    "                WHERE Price BETWEEN {fare_min} AND {fare_max}\n",
    "                AND Route_Name = \"{T}\"\n",
    "                AND {bus_type_condition} AND Departing_Time>='{TIME}'\n",
    "                ORDER BY Price and Departing_Time DESC\n",
    "            '''\n",
    "            my_cursor.execute(query)\n",
    "            out = my_cursor.fetchall()\n",
    "            conn.close()\n",
    "\n",
    "            df = pd.DataFrame(out, columns=[\n",
    "                \"ID\", \"Route_Name\",\"Route_Link\",\"Bus_Name\", \"Bus_Type\", \"Departing_Time\", \"Duration\", \"Reaching_Time\",\n",
    "                \"Star_Rating\",\"Price\",\"Seat_Availability\"\n",
    "            ])\n",
    "            return df\n",
    "\n",
    "        df_result = type_and_fare_T(select_type, select_fare)\n",
    "        slt.dataframe(df_result)\n",
    "\n",
    "    # kadamba bus fare filtering\n",
    "    if S==\"kadamba\":\n",
    "        G=slt.selectbox(\"list of routes\",lists_G)\n",
    "\n",
    "        def type_and_fare_G(bus_type, fare_range):\n",
    "            conn = mysql.connector.connect(host=\"localhost\", user=\"root\", password=\"naga\", database=\"RED_BUS_DETAILS\")\n",
    "            my_cursor = conn.cursor()\n",
    "            # Define fare range based on selection\n",
    "            if fare_range == \"50-1000\":\n",
    "                fare_min, fare_max = 50, 1000\n",
    "            elif fare_range == \"1000-2000\":\n",
    "                fare_min, fare_max = 1000, 2000\n",
    "            else:\n",
    "                fare_min, fare_max = 2000, 100000  \n",
    "\n",
    "            # Define bus type condition\n",
    "            if bus_type == \"sleeper\":\n",
    "                bus_type_condition = \"Bus_Type LIKE '%Sleeper%'\"\n",
    "            elif bus_type == \"semi-sleeper\":\n",
    "                bus_type_condition = \"Bus_Type LIKE '%A/c Semi Sleeper %'\"\n",
    "            else:\n",
    "                bus_type_condition = \"Bus_Type NOT LIKE '%Sleeper%' AND Bus_type NOT LIKE '%Semi-Sleeper%'\"\n",
    "\n",
    "            query = f'''\n",
    "                SELECT * FROM busdetails \n",
    "                WHERE Price BETWEEN {fare_min} AND {fare_max}\n",
    "                AND Route_name = \"{G}\"\n",
    "                AND {bus_type_condition} AND Departing_Time>='{TIME}'\n",
    "                ORDER BY Price and Departing_Time DESC\n",
    "            '''\n",
    "            my_cursor.execute(query)\n",
    "            out = my_cursor.fetchall()\n",
    "            conn.close()\n",
    "\n",
    "            df = pd.DataFrame(out, columns=[\n",
    "                \"ID\", \"Route_Name\",\"Route_Link\",\"Bus_Name\", \"Bus_Type\", \"Departing_Time\", \"Duration\", \"Reaching_Time\",\n",
    "                \"Star_Rating\",\"Price\",\"Seat_Availability\"\n",
    "            ])\n",
    "            return df\n",
    "\n",
    "        df_result = type_and_fare_G(select_type, select_fare)\n",
    "        slt.dataframe(df_result)\n",
    "\n",
    "    # Rajastan bus fare filtering\n",
    "    if S==\"Rajastan\":\n",
    "        R=slt.selectbox(\"list of routes\",lists_R)\n",
    "\n",
    "        def type_and_fare_R(bus_type, fare_range):\n",
    "            conn = mysql.connector.connect(host=\"localhost\", user=\"root\", password=\"naga\", database=\"RED_BUS_DETAILS\")\n",
    "            my_cursor = conn.cursor()\n",
    "            # Define fare range based on selection\n",
    "            if fare_range == \"50-1000\":\n",
    "                fare_min, fare_max = 50, 1000\n",
    "            elif fare_range == \"1000-2000\":\n",
    "                fare_min, fare_max = 1000, 2000\n",
    "            else:\n",
    "                fare_min, fare_max = 2000, 100000  \n",
    "\n",
    "            # Define bus type condition\n",
    "            if bus_type == \"sleeper\":\n",
    "                bus_type_condition = \"Bus_Type LIKE '%Sleeper%'\"\n",
    "            elif bus_type == \"semi-sleeper\":\n",
    "                bus_type_condition = \"Bus_Type LIKE '%A/c Semi Sleeper %'\"\n",
    "            else:\n",
    "                bus_type_condition = \"Bus_Type NOT LIKE '%Sleeper%' AND Bus_Type NOT LIKE '%Semi-Sleeper%'\"\n",
    "\n",
    "            query = f'''\n",
    "                SELECT * FROM busdetails \n",
    "                WHERE Price BETWEEN {fare_min} AND {fare_max}\n",
    "                AND Route_Name = \"{R}\"\n",
    "                AND {bus_type_condition} AND Departing_Time>='{TIME}'\n",
    "                ORDER BY Price and Departing_Time DESC\n",
    "            '''\n",
    "            my_cursor.execute(query)\n",
    "            out = my_cursor.fetchall()\n",
    "            conn.close()\n",
    "\n",
    "            df = pd.DataFrame(out, columns=[\n",
    "                \"ID\", \"Route_Name\",\"Route_Link\",\"Bus_Name\", \"Bus_Type\", \"Departing_Time\", \"Duration\", \"Reaching_Time\",\n",
    "                \"Star_Rating\",\"Price\",\"Seat_Availability\"\n",
    "            ])\n",
    "            return df\n",
    "\n",
    "        df_result = type_and_fare_R(select_type, select_fare)\n",
    "        slt.dataframe(df_result)\n",
    "          \n",
    "\n",
    "    # chandigarh bus fare filtering       \n",
    "    if S==\"Chandigarh\":\n",
    "        C=slt.selectbox(\"list of routes\",lists_C)\n",
    "\n",
    "        def type_and_fare_C(bus_type, fare_range):\n",
    "            conn = mysql.connector.connect(host=\"localhost\", user=\"root\", password=\"naga\", database=\"RED_BUS_DETAILS\")\n",
    "            my_cursor = conn.cursor()\n",
    "            # Define fare range based on selection\n",
    "            if fare_range == \"50-1000\":\n",
    "                fare_min, fare_max = 50, 1000\n",
    "            elif fare_range == \"1000-2000\":\n",
    "                fare_min, fare_max = 1000, 2000\n",
    "            else:\n",
    "                fare_min, fare_max = 2000, 100000  \n",
    "\n",
    "            # Define bus type condition\n",
    "            if bus_type == \"sleeper\":\n",
    "                bus_type_condition = \"Bus_Type LIKE '%Sleeper%'\"\n",
    "            elif bus_type == \"semi-sleeper\":\n",
    "                bus_type_condition = \"Bus_Type LIKE '%A/c Semi Sleeper %'\"\n",
    "            else:\n",
    "                bus_type_condition = \"Bus_Type NOT LIKE '%Sleeper%' AND Bus_Type NOT LIKE '%Semi-Sleeper%'\"\n",
    "\n",
    "            query = f'''\n",
    "                SELECT * FROM busdetails \n",
    "                WHERE Price BETWEEN {fare_min} AND {fare_max}\n",
    "                AND Route_Name = \"{C}\"\n",
    "                AND {bus_type_condition} AND Departing_Time>='{TIME}'\n",
    "                ORDER BY Price and Departing_Time DESC\n",
    "            '''\n",
    "            my_cursor.execute(query)\n",
    "            out = my_cursor.fetchall()\n",
    "            conn.close()\n",
    "\n",
    "            df = pd.DataFrame(out, columns=[\n",
    "                \"ID\", \"Route_Name\",\"Route_Link\",\"Bus_Name\", \"Bus_Type\", \"Departing_Time\", \"Duration\", \"Reaching_Time\",\n",
    "                \"Star_Rating\",\"Price\",\"Seat_Availability\"\n",
    "            ])\n",
    "            return df\n",
    "\n",
    "        df_result = type_and_fare_C(select_type, select_fare)\n",
    "        slt.dataframe(df_result)\n",
    "    \n",
    "    # Himachal bus fare filtering\n",
    "    if S==\"Himachal\":\n",
    "        H=slt.selectbox(\"list of rotes\",lists_H)\n",
    "\n",
    "        def type_and_fare_H(bus_type, fare_range):\n",
    "            conn = mysql.connector.connect(host=\"localhost\", user=\"root\", password=\"naga\", database=\"RED_BUS_DETAILS\")\n",
    "            my_cursor = conn.cursor()\n",
    "            # Define fare range based on selection\n",
    "            if fare_range == \"50-1000\":\n",
    "                fare_min, fare_max = 50, 1000\n",
    "            elif fare_range == \"1000-2000\":\n",
    "                fare_min, fare_max = 1000, 2000\n",
    "            else:\n",
    "                fare_min, fare_max = 2000, 100000  \n",
    "\n",
    "            # Define bus type condition\n",
    "            if bus_type == \"sleeper\":\n",
    "                bus_type_condition = \"Bus_Type LIKE '%Sleeper%'\"\n",
    "            elif bus_type == \"semi-sleeper\":\n",
    "                bus_type_condition = \"Bus_Type LIKE '%A/c Semi Sleeper %'\"\n",
    "            else:\n",
    "                bus_type_condition = \"Bus_Type NOT LIKE '%Sleeper%' AND Bus_Type NOT LIKE '%Semi-Sleeper%'\"\n",
    "\n",
    "            query = f'''\n",
    "                SELECT * FROM busdetails \n",
    "                WHERE Price BETWEEN {fare_min} AND {fare_max}\n",
    "                AND Route_Name = \"{H}\"\n",
    "                AND {bus_type_condition} AND Departing_Time>='{TIME}'\n",
    "                ORDER BY Price and Departing_Time DESC\n",
    "            '''\n",
    "            my_cursor.execute(query)\n",
    "            out = my_cursor.fetchall()\n",
    "            conn.close()\n",
    "\n",
    "            df = pd.DataFrame(out, columns=[\n",
    "                \"ID\", \"Route_Name\",\"Route_Link\",\"Bus_Name\", \"Bus_Type\", \"Departing_Time\", \"Duration\", \"Reaching_Time\",\n",
    "                \"Star_Rating\",\"Price\",\"Seat_Availability\"\n",
    "            ])\n",
    "            return df\n",
    "\n",
    "        df_result = type_and_fare_H(select_type, select_fare)\n",
    "        slt.dataframe(df_result)\n",
    "\n",
    "\n",
    "    # Assam bus fare filtering\n",
    "    if S==\"Assam\":\n",
    "        AS=slt.selectbox(\"list of rotes\",lists_AS)\n",
    "\n",
    "        def type_and_fare_AS(bus_type, fare_range):\n",
    "            conn = mysql.connector.connect(host=\"localhost\", user=\"root\", password=\"naga\", database=\"RED_BUS_DETAILS\")\n",
    "            my_cursor = conn.cursor()\n",
    "            # Define fare range based on selection\n",
    "            if fare_range == \"50-1000\":\n",
    "                fare_min, fare_max = 50, 1000\n",
    "            elif fare_range == \"1000-2000\":\n",
    "                fare_min, fare_max = 1000, 2000\n",
    "            else:\n",
    "                fare_min, fare_max = 2000, 100000  \n",
    "\n",
    "            # Define bus type condition\n",
    "            if bus_type == \"sleeper\":\n",
    "                bus_type_condition = \"Bus_Type LIKE '%Sleeper%'\"\n",
    "            elif bus_type == \"semi-sleeper\":\n",
    "                bus_type_condition = \"Bus_Type LIKE '%A/c Semi Sleeper %'\"\n",
    "            else:\n",
    "                bus_type_condition = \"Bus_Type NOT LIKE '%Sleeper%' AND Bus_Type NOT LIKE '%Semi-Sleeper%'\"\n",
    "\n",
    "            query = f'''\n",
    "                SELECT * FROM busdetails \n",
    "                WHERE Price BETWEEN {fare_min} AND {fare_max}\n",
    "                AND Route_Name = \"{AS}\"\n",
    "                AND {bus_type_condition} AND Departing_Time>='{TIME}'\n",
    "                ORDER BY Price and Departing_Time DESC\n",
    "            '''\n",
    "            my_cursor.execute(query)\n",
    "            out = my_cursor.fetchall()\n",
    "            conn.close()\n",
    "\n",
    "            df = pd.DataFrame(out, columns=[\n",
    "                \"ID\", \"Route_Name\",\"Route_Link\",\"Bus_Name\", \"Bus_Type\", \"Departing_Time\", \"Duration\", \"Reaching_Time\",\n",
    "                \"Star_Rating\",\"Price\",\"Seat_Availability\"\n",
    "            ])\n",
    "            return df\n",
    "\n",
    "        df_result = type_and_fare_AS(select_type, select_fare)\n",
    "        slt.dataframe(df_result)\n",
    "\n",
    "    # jammu bus fare filtering\n",
    "    if S==\"jammu\":\n",
    "        J=slt.selectbox(\"list of rotes\",lists_J)\n",
    "\n",
    "        def type_and_fare_UP(bus_type, fare_range):\n",
    "            conn = mysql.connector.connect(host=\"localhost\", user=\"root\", password=\"naga\", database=\"RED_BUS_DETAILS\")\n",
    "            my_cursor = conn.cursor()\n",
    "            # Define fare range based on selection\n",
    "            if fare_range == \"50-1000\":\n",
    "                fare_min, fare_max = 50, 1000\n",
    "            elif fare_range == \"1000-2000\":\n",
    "                fare_min, fare_max = 1000, 2000\n",
    "            else:\n",
    "                fare_min, fare_max = 2000, 100000  \n",
    "\n",
    "            # Define bus type condition\n",
    "            if bus_type == \"sleeper\":\n",
    "                bus_type_condition = \"Bus_Type LIKE '%Sleeper%'\"\n",
    "            elif bus_type == \"semi-sleeper\":\n",
    "                bus_type_condition = \"Bus_Type LIKE '%A/c Semi Sleeper %'\"\n",
    "            else:\n",
    "                bus_type_condition = \"Bus_Type NOT LIKE '%Sleeper%' AND Bus_Type NOT LIKE '%Semi-Sleeper%'\"\n",
    "\n",
    "            query = f'''\n",
    "                SELECT * FROM busdetails \n",
    "                WHERE Price BETWEEN {fare_min} AND {fare_max}\n",
    "                AND Route_Name = \"{J}\"\n",
    "                AND {bus_type_condition} AND Departing_Time>='{TIME}'\n",
    "                ORDER BY Price and Departing_Time DESC\n",
    "            '''\n",
    "            my_cursor.execute(query)\n",
    "            out = my_cursor.fetchall()\n",
    "            conn.close()\n",
    "\n",
    "            df = pd.DataFrame(out, columns=[\n",
    "                \"ID\", \"Route_Name\",\"Route_Link\",\"Bus_Name\", \"Bus_Type\", \"Departing_Time\", \"Duration\", \"Reaching_Time\",\n",
    "                \"Star_Rating\",\"Price\",\"Seat_Availability\"\n",
    "            ])\n",
    "            return df\n",
    "\n",
    "        df_result = type_and_fare_J(select_type, select_fare)\n",
    "        slt.dataframe(df_result)\n",
    "\n",
    "    # West Bengal bus fare filtering\n",
    "    if S==\"West Bengal\":\n",
    "        WB=slt.selectbox(\"list of rotes\",lists_WB)\n",
    "\n",
    "        def type_and_fare_WB(bus_type, fare_range):\n",
    "            conn = mysql.connector.connect(host=\"localhost\", user=\"root\", password=\"naga\", database=\"RED_BUS_DETAILS\")\n",
    "            my_cursor = conn.cursor()\n",
    "            # Define fare range based on selection\n",
    "            if fare_range == \"50-1000\":\n",
    "                fare_min, fare_max = 50, 1000\n",
    "            elif fare_range == \"1000-2000\":\n",
    "                fare_min, fare_max = 1000, 2000\n",
    "            else:\n",
    "                fare_min, fare_max = 2000, 100000  \n",
    "\n",
    "            # Define bus type condition\n",
    "            if bus_type == \"sleeper\":\n",
    "                bus_type_condition = \"Bus_Type LIKE '%Sleeper%'\"\n",
    "            elif bus_type == \"semi-sleeper\":\n",
    "                bus_type_condition = \"Bus_Type LIKE '%A/c Semi Sleeper %'\"\n",
    "            else:\n",
    "                bus_type_condition = \"Bus_Type NOT LIKE '%Sleeper%' AND Bus_Type NOT LIKE '%Semi-Sleeper%'\"\n",
    "\n",
    "            query = f'''\n",
    "                SELECT * FROM busdetails \n",
    "                WHERE Price BETWEEN {fare_min} AND {fare_max}\n",
    "                AND Route_Name = \"{WB}\"\n",
    "                AND {bus_type_condition} AND Departing_Time>='{TIME}'\n",
    "                ORDER BY Price and Departing_Time  DESC\n",
    "            '''\n",
    "            my_cursor.execute(query)\n",
    "            out = my_cursor.fetchall()\n",
    "            conn.close()\n",
    "\n",
    "            df = pd.DataFrame(out, columns=[\n",
    "                \"ID\", \"Route_Name\",\"Route_Link\",\"Bus_Name\", \"Bus_Type\", \"Departing_Time\", \"Duration\", \"Reaching_Time\",\n",
    "                \"Star_Rating\",\"Price\",\"Seat_Availability\"\n",
    "            ])\n",
    "            return df\n",
    "\n",
    "        df_result = type_and_fare_WB(select_type, select_fare)\n",
    "        slt.dataframe(df_result)\n",
    "\n",
    "#The output of the page is:http://localhost:8503/\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
